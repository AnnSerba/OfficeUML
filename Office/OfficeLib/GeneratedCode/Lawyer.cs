//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан инструментальным средством
//     В случае повторного создания кода изменения, внесенные в этот файл, будут потеряны.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class Lawyer
{
    private Schedule schedule;
    private Register register;
	public virtual Schedule Schedule
	{
        get
        {
            return schedule;
        }
        set
        {
            schedule = value;
        }
	}

	public virtual Register Register
	{
        get
        {
            return register;
        }
        set
        {
            register = value;
        }
	}

	public virtual string Menu()
	{
        string line = "----------------------\n";
        line += "1 - Просмотр клиентов реестра\n";
        line += "2 - Поиск клиента по реестру\n";
        line += "3 - Добавить клиента в реестр\n";
        line += "4 - Удалить клиента из реестра\n";
        line += "5 - Изменить клиента в реестре\n";
        line += "6 - Просмотр документов реестра\n";
        line += "7 - Поиск документов по реестру\n";
        line += "8 - Добавить документ в реестр\n";
        line += "9 - Удалить документ из реестра\n";
        line += "10 - Изменить документ в реестре\n";
        line += "11 - Просмотр расписания\n";
        line += "12 - Поиск задачи в расписании\n";
        line += "0 - Выход\n";
        line += "------------------\n";
        return line;
	}

    public Lawyer(string name, Register register)
    {

        Register = register;
        Schedule = new Schedule(Register, name);

        while (true)
        {
            try
            {
                Console.WriteLine(Menu());
                string key = Console.ReadLine();
                if (key == "0")
                {
                    break;
                }
                else if (key == "1")
                {
                    Console.WriteLine(register.ToStringAllClients(register.ListClients));
                }
                else if (key == "2")
                {
                    Console.WriteLine(register.ToStringAllClients(register.SearchClient(null, new List<bool>())));
                }
                else if (key == "3")
                {
                    int number = InputStringToInt("Введите номер клиента (0 - Отмена)", 0, int.MaxValue);
                    if (number != 0)
                    {
                        Console.WriteLine("Физическое лицо(1) или юридическое лицо(...)?(0 - Отмена)");
                        Person person = AddClient(Console.ReadLine());
                        if (person != null)
                        {
                            Console.WriteLine(register.AddClient(number, person, name));
                        }
                    }
                }
                else if (key == "4")
                {
                    int number = InputStringToInt("Введите номер клиента (0 - Отмена)", 0, int.MaxValue);
                    if (number != 0)
                    {
                        Console.WriteLine(register.DeleteClient(number, name));
                    }

                }
                else if (key == "5")
                {
                    int number = InputStringToInt("Введите номер клиента (0 - Отмена)", 0, int.MaxValue);
                    if (number != 0)
                    {
                    }
                }
                else if (key == "6")
                {
                    Console.WriteLine(register.ToStringAllDocument(register.ListDocuments));
                }
                else if (key == "7")
                {
                    Console.WriteLine(register.ToStringAllDocument(register.SearchDocument(null, new List<bool>())));
                }
                else if (key == "8")
                {
                    int number = InputStringToInt("Введите номер документа (0 - Отмена)", 0, int.MaxValue);
                    if (number != 0)
                    {
                        Console.WriteLine("Доверенность(1), договор(2), иск(3) или претензия(...)?(0 - Отмена)");
                        Document document = AddDocument(Console.ReadLine());
                    }

                }
                else if (key == "9")
                {
                    int number = InputStringToInt("Введите номер документ (0 - Отмена)", 0, int.MaxValue);
                    if (number == 0)
                    {
                        Console.WriteLine(register.DeleteDocument(number, name));
                    }
                }
                else if (key == "10")
                {
                    Console.WriteLine(register.ChangeDocument(-1, -1, null, name));
                }
                else if (key == "11")
                {
                    Console.WriteLine(Schedule.ToString(Schedule.ListTask));

                }
                else if (key == "12")
                {
                    Console.WriteLine(Schedule.ToString(Schedule.SearchTaskToListTask(new Date(1, 1, 1))));
                }
                else
                {
                    Console.WriteLine("Ошибка ввода");
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }
    public virtual Person AddClient(string type)
    {
        Person person=null;
        if (type == "0")
        {
            return null;
        }
        else if (type == "1")
        {
            Console.WriteLine("Введите имя (0 - Отмена)");
            string name=Console.ReadLine();
            if (name=="0")
            {
                return null;
            }
                Console.WriteLine("Введите серию и номер паспорта (0 - Отмена)");
            string seriaAndNumberPasport=Console.ReadLine();
            if (seriaAndNumberPasport == "0")
            {
                return null;
            }
            //person = new IndividualPerson(name, seriaAndNumberPasport);
        }
        else
        {
            Console.WriteLine("Введите имя (0 - Отмена)");
            string name = Console.ReadLine();
            if (name == "0")
            {
                return null;
            }
            Console.WriteLine("Введите имя представителя (0 - Отмена)");
            string nameRepresentative = Console.ReadLine();
            if (nameRepresentative == "0")
            {
                return null;
            }
            Console.WriteLine("Введите сферу деятельности (0 - Отмена)");
            string scope = Console.ReadLine();
            if (scope == "0")
            {
                return null;
            }
            //person = new LegalEntity(name,nameRepresentative,scope);
        }
        return person;
    }
    public virtual Person ChangeClient(int number)
    {
        
        return register.ListClients[number];
    }
    public virtual Document AddDocument(string type)
    {
        throw new System.NotImplementedException();
    }
    public int InputStringToInt(string line, int limit1, int limit2)
    {
        string input = "";
        int result = 0;
        do
        {
            Console.WriteLine(line);
            input = Console.ReadLine();
            if (int.TryParse(input, out result) == false)
            {
                Console.WriteLine("Ошибка ввода");
            }
            if (result < limit1 || result > limit2)
            {
                Console.WriteLine("Введённое значение логически неверно");
            }
        } while (int.TryParse(input, out result) == false || result < limit1 || result > limit2);
        return result;
    }
}

