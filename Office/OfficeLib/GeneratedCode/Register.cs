//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан инструментальным средством
//     В случае повторного создания кода изменения, внесенные в этот файл, будут потеряны.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

public class Register
{
    private SortedList<int, Person> listClients;

    public SortedList<int, Person> ListClients
    {
        get
        {
            return listClients;
        }
        set
        {
            ;
            //listClients = value;
        }
    }

    private SortedList<int, Document> listDocuments;
    public SortedList<int, Document> ListDocuments
    {
        get
        {
            return listDocuments;
        }
        set
        {
            ;
            //listDocuments = value;
        }
    }

    public Register()
    {
        listClients = new SortedList<int, Person>();
        listDocuments = new SortedList<int, Document>();
    }

    public virtual string AddClient(int number, Person person, string name)
    {
        if (listClients.ContainsKey(number) == false)
        {
            listClients.Add(number, person);
            AddChangeInRegisterToFile("Добавлен клиент:\n" + "Номер" + number + listClients[number].ToString(), name);
            return "Клиент в реестр добавлен";
        }
        return "Ошибка добавления клиента в реестр. Клиент с таким номером ужедобавлен";

    }

    public virtual string DeleteClient(int number, string name)
    {
        if (listClients.ContainsKey(number) == true)
        {
            AddChangeInRegisterToFile("Удалён клиент:\n" + "Номер" + number + listClients[number].ToString(), name);
            listClients.Remove(number);
            return "Клиент удалён из реестра";
        }
        return "Ошибка удаления клиента из реестра. Клиента с таким номером нету в реестре";
    }

    public virtual string ChangeClient(int numberChange, int numberChanged, Person personChanged, string name)
    {
        string line = "";
        if (listClients.ContainsKey(numberChange) == true)
        {
            line = "Клиент изменён с" + "Номер" + numberChange + listClients[numberChange].ToString();
            Person person = listClients[numberChange];
            listClients.Remove(numberChange);

            if (listClients.ContainsKey(numberChanged) == false)
            {
                listClients.Add(numberChanged, personChanged);
                return "Клиент в реестре успешно изменён";
            }
            else
            {
                listClients.Add(numberChange, personChanged);
                return "Клиент изменён, но этот номер уже занят=> клиент был сохранён в предыдущем номере";
            }
            line += " на\n" + "Номер" + numberChanged + listClients[numberChanged].ToString();
            AddChangeInRegisterToFile(line, name);
        }
        return "Ошибка изменения клиента. Клиент не найден";
    }

    public virtual string AddDocument(int number, Document document, string name)
    {
        if (listDocuments.ContainsKey(number) == false)
        {
            listDocuments.Add(number, document);
            AddChangeInRegisterToFile("Добавлен документ:\n" + "Номер" + number + listDocuments[number].ToString(), name);
            return "Документ в реестр добавлен";
        }
        return "Ошибка добавления документа в реестр. Документ с таким номером ужедобавлен";
    }

    public virtual string DeleteDocument(int number, string name)
    {
        if (listDocuments.ContainsKey(number) == true)
        {
            AddChangeInRegisterToFile("Удалён документ:\n" + "Номер" + number + listDocuments[number].ToString(), name);
            listDocuments.Remove(number);
            return "Документ удалён из реестра";
        }
        return "Ошибка удаления документа из реестра. Документ с таким номером нету в реестре";
    }

    public virtual string ChangeDocument(int numberChange, int numberChanged, Document documentChanged, string name)
    {
        string line = "";
        if (listDocuments.ContainsKey(numberChange) == true)
        {
            line = "Документ изменён с" + "Номер" + numberChange + listDocuments[numberChange].ToString();
            Document document = listDocuments[numberChange];
            listDocuments.Remove(numberChange);
            if (listDocuments.ContainsKey(numberChanged) == false)
            {
                listDocuments.Add(numberChanged, documentChanged);
                return "Документ в реестре успешно изменён";
            }
            else
            {
                listDocuments.Add(numberChange, documentChanged);
                return "Документ изменён, но этот номер уже занят=> Документ был сохранён в предыдущем номере";
            }
            line += " на\n" + "Номер" + numberChanged + listDocuments[numberChanged].ToString();
            AddChangeInRegisterToFile(line, name);
        }
        return "Ошибка изменения документа. Документ не найден";
    }

    public virtual string ChangeAttributeFromPayment(int number, bool payment, double cost, string name)
    {
        if (listDocuments.ContainsKey(number) == true)
        {
            listDocuments[number].Change(payment, cost);
        }
        return "Ошибка изменения информации об оплате";
    }

    public virtual SortedList<int, Person> SearchClient(Person person, List<bool> attribute)
    {
        throw new System.NotImplementedException();
    }

    public virtual SortedList<int, Document> SearchDocument(Document document, List<bool> attribute)
    {
        throw new System.NotImplementedException();
    }

    private void AddChangeInRegisterToFile(string line, string name)
    {
        FileInfo file = new FileInfo("Report.txt");
        if (file.Exists == false)
        {
            file.Create();
        }
        else
        {
            StreamWriter streamWriter = new StreamWriter("Report.txt");
            streamWriter.AutoFlush = false;
            streamWriter.WriteLine(line);
            streamWriter.Close();
        }
    }

    public virtual string ToString()
    {
        return ToStringAllClients(listClients) + ToStringAllDocument(listDocuments);
    }

    public virtual string ToStringNumberCostPayment(SortedList<int,Document> listDocuments)
    {
        string line = "\n///////\n";
        foreach (int i in listDocuments.Keys)
        {
            line+="\nНомер"+i+listDocuments[i].ToStringNumberCostPayment();
        }
        line += "\n/////";
        return line;
    }

    public virtual string ToStringAllClients(SortedList<int,Person> listClients)
    {
        if (listClients.Keys.Count == 0)
        {
            return "В реестре нет клиентов";
        }
        else
        {
            string line = "---------------------";
            foreach (int i in listClients.Keys)
            {
                line += "\n*****************\n";
                line += "Номер:" + i + "\n" + listClients[i].ToString();
                line += "\n*****************\n";
            }
            line += "----------------";
            return line;
        }
    }
    public virtual string ToStringAllDocument(SortedList<int,Document> listDocuments)
    {
        if (listDocuments.Keys.Count == 0) 
        {
            return "В реестре нет документов";
        }
        else
        {
            string line = "---------------------";
            foreach (int i in listDocuments.Keys)
            {
                line += "*****************";
                line += "Номер:" + i + "\n" + listDocuments[i].ToString();
                line += "*****************";
            }
            line += "----------------";
            return line;
        }
    }
    public virtual string ReadFile()
    {
        throw new System.NotImplementedException();
    }
    public virtual string WriteInFile()
    {
        throw new System.NotImplementedException();
    }
}

